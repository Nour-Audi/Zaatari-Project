lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup=mag))
}
quakes$mag
leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup= "Test")
distinct_by_stations<-distinct(quake,stations)
distinct_by_stations<-distinct(quakes,stations)
leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup= "Test")
distinct_by_stations
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup=~as.character(mag))
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup=~as.character(mag))
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup=~as.character(mag))
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat,popup=~as.character(mag))
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(distinct_by_stations$long,~lat,popup=~as.character(mag))
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(distinct_by_stations$long,distinct_by_stations$lat,popup=~as.character(mag))
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(distinct_by_stations$long,distinct_by_stations$lat)
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
attach(distinct_by_stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
quakes
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
attach(quakes)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
createMaps()
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
attach(quakes)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
data(quakes)
library(leaflet)
library(dplyr)
library(htmltools)
##Add A Random Year Column
quakes$year=sample(2006:2015,length(quakes),replace=TRUE)
attach(quakes)
createMaps<-function(x){
distinct_by_stations<-distinct(x,stations)
lflt<-leaflet(data = distinct_by_stations) %>% addTiles() %>% addMarkers(~long,~lat)
}
htmltools::tagList(lapply(split(quakes,quakes$year),function(x){createMaps(x)}))
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
library(XML)
doc <- xmlInternalTreeParse("cap_data/block_location.kml")
coord <-xpathApply(doc,"/kml:kml//kml:coordinates",xmlValue)
names <-xpathApply(doc,"/kml:kml//kml:name",xmlValue)
names <- names[c(6:195)]
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
count = 1
for (x in names){
name <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block <- name[2]
block <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long = as.numeric(coordlist[1])
lat = as.numeric(coordlist[1])
row <- data.frame(district=district, block=block, long = long, lat = lat)
data <- rbind(data,row)
count = count + 1
}
saveRDS(data,"cap_data/coord.rds")
setwd("~/Documents/Capstone/mapsite")
shiny::runApp()
setwd("~/Documents/Capstone/mapsite")
runApp()
block <- readRDS("cap_data/coord.rds")
runApp()
map <- renderLeaflet({
leaflet(data = block) %>%
addTiles( ) %>%
addMarkers(~long, ~lat)
setView(lng = 36.345 , lat = 32.29 , zoom = 14)
})
map
map()
leaflet(data = block) %>%
addTiles( ) %>%
addMarkers(~long, ~lat)
setView(lng = 36.345 , lat = 32.29 , zoom = 14)
block
runApp()
runApp()
runApp()
x <-  leaflet(data = block ) %>%
addTiles() %>%
addMarkers(lng = ~long,lat= ~lat)
setView(lng = 36.345 , lat = 32.29 , zoom = 14)
runApp()
runApp()
leaflet(data = block ) %>%
addTiles() %>%
addMarkers(lat = ~long,lng= ~lat)
setView(lng = 36.345 , lat = 32.29 , zoom = 14)
addTiles(map)
quakes
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag))
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat)
leaflet(data = block[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat)
leaflet(data = block) %>% addTiles() %>%
addMarkers(~long, ~lat)
runApp()
blocks
block
count = 1
for (x in names){
name <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block <- name[2]
block <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long = as.numeric(coordlist[1])
lat = as.numeric(coordlist[2])
row <- data.frame(district=district, block=block, long = long, lat = lat)
data <- rbind(data,row)
count = count + 1
}
saveRDS(data,"cap_data/coord.rds")
runApp()
runApp()
block
runApp()
runApp()
~block
"Test" + "test"
"Test".append("test")
z<- "Test"
x
z
runApp()
library(gtools)
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "d2"
d8$district <- "d8"
d9$district <- "d9"
new         <- smartbind(d2,d8)
new         <- smartbind(new,d9)
new
new[1]
new[1]
View(new)
new['education_skills']
new['education_skills.literate']
DT <- data.table(new)
library(data.table)
install.packages("data.table")
library(data.table)
DT <- data.table(new)
DT
DT[, sum(household.household_member), by = district]
DT[, sum(household.household_member), by = district,block]
DT[, sum(household.household_member), keyby = district,block]
DT[, sum(household.household_member), by = list(district,block)]
DT[, sum(household.household_member), by = c(district,block)]
DT[, sum(household.household_member), by = c("district"","block"")]
DT[, sum(household.household_member), by = c("district","block")]
DT[, sum(household.household_member), by = list(district,block)]
DT[, sum(household.household_member), by = list(district,collector.block_number)]
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "2"
d8$district <- "8"
d9$district <- "9"
new         <- smartbind(d2,d8)
new         <- smartbind(new,d9)
saveRDS(new,"cap_data/data.rds")
library(data.table)
DT <- data.table(new)
DT[, sum(household.household_member), by = list(district,collector.block_number)]
coord
data
type(data)
typeof(data)
typeof(DT)
test
test <- DT[, sum(household.household_member), by = list(district,collector.block_number)]
test
data.frame(test)
test <- data.frame(DT[, sum(household.household_member), by = list(district,collector.block_number)])
merge(x=test, y = data, by=NULL)
merge(x=test, y = data, by="district", all = TRUE)
test
colnames(test)
colnames(test)[2]
colnames(test)[2] <- "block"
test
merge(x=test, y = data, by="district", all = TRUE)
merge(x=test, y = data, by=list("district","block"), all = TRUE)
merge(x=test, y = data, by=list(district,block), all = TRUE)
merge(x=test, y = data, by=c(district,block), all = TRUE)
merge(x=test, y = data, by=c("district","block"), all = TRUE)
final <- merge(x=test, y = data, by=c("district","block"), all = TRUE)
final
final[V1]
final["V1"]
final[final["V1"]!=NA]
final[final["V1"]!=null]
final[final["V1"]=9]
final[final["V1"]==9]
final["V1"]==9]
final["V1"]==9
final[final["V1"]==9]
final[-final["V1"]==9]
final["V1"]==9]
final
typeof(final)
final[final["V1"]==9,]
final[final["V1"]!=9]
final[final["V1"]!=9,]
final[final["district"]!=9,]
final[final["district"]==2,]
colTypes(final)
sapply(final, typeof)
final[final["V1"]==5,]
final[final["V1"]!=5,]
final
View(final)
View(final)
final[final["V1"]!=NaN,]
final[final["V1"]!=NaN,]
final[is.na()]
final[is.na(final['V1'])]
final[is.na(final['V1']),]
final[!is.na(final['V1']),]
removeNulls <- final[!is.na(final['V1']),]
removeNulls
final <- merge(x=test, y = data, by=c("district","block"), all = TRUE))
saveRDS(removeNulls,"cap_data/coord1.rds")
runApp()
runApp()
test <- data.frame(DT[, sum(household.household_member), by = list(district,collector.block_number)])
test
test <- data.frame(DT[, sum(household.household_member),sum(household.household_member), by = list(district,collector.block_number)])
test <- data.frame(DT[, list(sum(household.household_member),sum(household.household_member)), by = list(district,collector.block_number)])
runApp()
test
View(data)
test <- data.frame(DT[, list(sum(household.household_member),sum(household.household_member)), by = list(district,collector.block_number)])
new
columnNames(new)
colNames(new)
colnames(new)
data
DT
DT[1]
test <- data.frame(DT[, list(sum(household.household_member),sum(education_skills.literate_other)), by = list(district,collector.block_number)])
DT$education_skills.high_education
DT$education_skills.literate
sum(DT$education_skills.literate)
sum(new$education_skills.high_education
)
new$education_skills.high_education
new$education_skills.literate
new$education_skills.high_education
new$education_skills.literate
sum(as.numeric(new$education_skills.literate))
test <- data.frame(DT[, list(sum(household.household_member),sum(as.numeric(new$education_skills.literate)), by = list(district,collector.block_number)])
test <- data.frame(DT[, list(sum(household.household_member),sum(as.numeric(new$education_skills.literate))), by = list(district,collector.block_number)])
test
test <- data.frame(DT[, list(sum(household.household_member),sum(as.numeric(new$education_skills.literate))), by = list(district,collector.block_number)])
test <- data.frame(DT[, list(sum(household.household_member),sum(as.numeric(new$education_skills.literate))), by = list(district,collector.block_number)])
test1 <- data.frame(DT[, list(sum(household.household_member),sum(as.numeric(new$education_skills.literate))), by = list(district,collector.block_number)])
test1
test1 <- data.frame(DT[, sum(as.numeric(new$education_skills.literate)), by = list(district,collector.block_number)])
test1
test1 <- data.frame(DT[, sum(as.factor(new$education_skills.literate)), by = list(district,collector.block_number)])
test1 <- data.frame(DT[, sum(as.numeric(as.character(new$education_skills.literate)), by = list(district,collector.block_number)])
test1 <- data.frame(DT[, sum(as.numeric(as.character(new$education_skills.literate))), by = list(district,collector.block_number)])
test1
test1 <- data.frame(DT[, sum(as.numeric(as.character(DT$education_skills.literate))), by = list(district,collector.block_number)])
test1 <- data.frame(DT[, sum(as.numeric(DT$education_skills.literate)), by = list(district,collector.block_number)])
test1
test1 <- data.frame(DT[, sum(DT$education_skills.literate), by = list(district,collector.block_number)])
test1 <- data.frame(DT[, sum(education_skills.literate), by = list(district,collector.block_number)])
test1 <- data.frame(DT[, sum(as.numeric(education_skills.literate)), by = list(district,collector.block_number)])
test1
test1 <- data.frame(DT[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
test1
DT <- data.table(new)
test <- data.frame(DT[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
colnames(test)[2] <- "block"
final <- merge(x=test, y = data, by=c("district","block"), all = TRUE)
removeNulls <- final[!is.na(final['V1']),]
test1 <- data.frame(DT[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
removeNulls
test <- data.frame(DT[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
test
colnames(test)[2] <- "block"
final <- merge(x=test, y = data, by=c("district","block"), all = TRUE)
final
removeNulls <- final[!is.na(final['V1']),]
removeNulls
test
data
final <- merge(x=test, y = data, by=c("district","block"), all.x = TRUE)
final
removeNulls <- final[!is.na(final['V1']),]
removeNulls
final <- merge(x=test, y = data, by=c("district","block"), all.x = TRUE)
final
test
final <- merge(x=test, y = data, by=c("district","block"), all = TRUE)
final
df[!duplicated(df), ]
df <- final
df[!duplicated(df), ]
df[duplicated(df), ]
df[!duplicated(df), ]
unique(removeNulls)
test
final <- merge(x=test, y = data, by=list(district,block), all = TRUE)
final <- merge(x=test, y = data, keyby=list("district","block"), all = TRUE)
final
data
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
count = 1
for (x in names){
name <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block <- name[2]
block <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long = as.numeric(coordlist[1])
lat = as.numeric(coordlist[2])
row <- data.frame(district=district, block=block, long = long, lat = lat)
data <- rbind(data,row)
count
}
library(data.table)
DT <- data.table(new)
test <- data.frame(DT[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
colnames(test)[2] <- "block"
data
library(gtools)
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "2"
d8$district <- "8"
d9$district <- "9"
new         <- smartbind(d2,d8)
new         <- smartbind(new,d9)
saveRDS(new,"cap_data/data.rds")
unique(d2$collector.block_number)
unique(d8$collector.block_number)
unique(d9$collector.block_number)
library(XML)
doc <- xmlInternalTreeParse("cap_data/block_location.kml")
coord <-xpathApply(doc,"/kml:kml//kml:coordinates",xmlValue)
names <-xpathApply(doc,"/kml:kml//kml:name",xmlValue)
names <- names[c(6:195)]
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
count = 1
for (x in names){
name <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block <- name[2]
block <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long = as.numeric(coordlist[1])
lat = as.numeric(coordlist[2])
row <- data.frame(district=district, block=block, long = long, lat = lat)
data <- rbind(data,row)
count = count + 1
}
saveRDS(data,"cap_data/coord.rds")
library(data.table)
DT <- data.table(new)
test <- data.frame(DT[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
colnames(test)[2] <- "block"
final <- merge(x=test, y = data, keyby=list("district","block"), all = TRUE)
removeNulls <- final[!is.na(final['V1']),]
saveRDS(removeNulls,"cap_data/coord1.rds")
final
removeNulls
runApp()
