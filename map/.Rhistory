block$long == as.numeric(36.33203)
36.215 == 36.215
block['long'][1,]
block['long'][1,] == 36.3173
block['long'][1,] == as.double(36.3173)
as.numeric(block['long'][1,]) == as.double(36.3173)
as.numeric(block['long'][1,]) == 36.3173
all.equal(2.25,2.25)
all.equal(2.25,2.24)
block['long'][1,][1]
block['long'][1,]
block['long'][1,] > 36
round(block['long'][1,],-4)
round(block['long'][1,],4)
round(block['long'][1,],5)
round(block['long'][1,],6)
round(block['long'][1,],4)
round(block['long'][1,],4) == 36.3173
round(block['long'][1,],2) == 36.3173
round(block['long'][1,],4) == 36.3173
runApp()
round(block$long,4)
round(block$long,4)[1]
runApp()
test <- block[block$long==lng,]
lng <- 36.33171
test <- block[block$long==lng,]
test
test <- block[round(block$long,4)==lng,]
test
round(block$long,4)==lng
36.33171==lng
round(block$lat,4)==32.901
block
round(block$lat,4)==32.2901
round(block$lat,4)==32.2901
runApp()
runApp()
round(block$long,4)
runApp()
runApp()
bloc
block
block[(round(block$long,4)==lng && round(block$lat,5)==lat ),]
block[round(block$lat,5)==lat ),]
block[round(block$lat,5)==lat,]
block[(round(block$long,4)==lng & round(block$lat,5)==lat ),]
lat
lon
lng <- 32.2994
lat <- 36.3176
block[(round(block$long,4)==lng & round(block$lat,5)==lat ),]
block[(round(block$long,4)==lng,]
block[round(block$long,4)==lng,]
lng <- 36.33484
block[round(block$long,4)==lng,]
block[round(block$long,5)==lng,]
runApp()
lat <- 32.29941
lng <- 32.29941
lng <- 36.31673
block[(round(block$long,5)==lng,]
block[round(block$long,5)==lng,]
block[(round(block$long,5)==lng),]
block[(round(block$long,5)==lng && block$district == 2),]
block[(round(block$long,5)==lng & block$district == 2),]
block[(round(block$long,5)==lng & round(block$lat,5)==lat),]
block[round(block$lat,5)==lat),]
block[round(block$lat,5==lat),]
runApp()
runApp()
runApp()
block[[V!]]
block[[V1]]
block[[V1]]
block
block[["V1"]]
runApp()
install.packages("hash")
t <- hash()
library(hash)
t <- hash()
t["totalEdupeople"]
t["totalEdupeople"] <- "V1"
t["totalpeople"] <- "V2"
t
t["totalEdupeople"]
t["totalEdupeople"][1]
x <- t["totalEdupeople"]
x
x <- t[["totalEdupeople"]]
x
runApp()
runApp()
library(gtools)
library(data.table)
library(XML)
#read in asset csv files, assign district column based on relevant district
#join the tables together
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "2"
d8$district <- "8"
d9$district <- "9"
joinTable   <- smartbind(d2,d8)
joinTable   <- smartbind(joinTable,d9)
#reading and parsing the block locations from the kml files
doc   <- xmlInternalTreeParse("cap_data/block_location.kml")
coord <- xpathApply(doc,"/kml:kml//kml:coordinates",xmlValue)
names <- xpathApply(doc,"/kml:kml//kml:name",xmlValue)
names <- names[c(6:195)]
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
#creating a datafram from the parsed block locations
count = 1
for (x in names){
name     <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block    <- name[2]
block    <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long         <- as.numeric(coordlist[1])
lat          <- as.numeric(coordlist[2])
row          <- data.frame(district=district, block=block, long = long, lat = lat)
data         <- rbind(data,row)
count        <- count + 1
}
#summing at the block level from the asset data and the combining with a coordinates for a final complete table
assetTable                 <- data.table(joinTable)
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
colnames(blockSumTable)[2] <- "block"
mergeTable                 <- merge(x=blockSumTable, y = data, keyby=list("district","block"), all = TRUE)
cleanFinal                 <- mergeTable[!is.na(mergeTable['V1']),]
saveRDS(cleanFinal,"cap_data/block_summary.rds")
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),sum(household.household_member)), by = list(district,collector.block_number)])
blockSumTable              <- data.frame(assetTable[, sum(as.numeric(education_skills.literate))/sum(household.household_member) , by = list(district,collector.block_number)])
blockSumTable
blockSumTable              <- data.frame(assetTable[, sum(as.numeric(education_skills.literate))/sum(household.household_member) , by = list(district,collector.block_number)])
test <- sum(as.numeric(education_skills.literate))/sum(household.household_member)
sum(as.numeric(education_skills.literate))/sum(household.household_member)
function(){sum(as.numeric(education_skills.literate))/sum(household.household_member)}
sdfas /
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member)),
by = list(district,collector.block_number)])
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member)),
by = list(district,collector.block_number)])
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member)),
sum(as.numeric(education_skills.literate))/sum(household.household_member),
by = list(district,collector.block_number)])
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member)),
sum(as.numeric(education_skills.literate))/sum(household.household_member),
keyby = list(district,collector.block_number)])
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member),
sum(as.numeric(education_skills.literate))/sum(household.household_member)
),
by = list(district,collector.block_number)])
blockSumTable
colnames(blockSumTable)[2] <- "block"
colnames(blockSumTable)[3] <- "total_educated"
colnames(blockSumTable)[4] <- "total_residents"
colnames(blockSumTable)[5] <- "literacy"
blockSumTable
library(gtools)
library(data.table)
library(XML)
#read in asset csv files, assign district column based on relevant district
#join the tables together
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "2"
d8$district <- "8"
d9$district <- "9"
joinTable   <- smartbind(d2,d8)
joinTable   <- smartbind(joinTable,d9)
#reading and parsing the block locations from the kml files
doc   <- xmlInternalTreeParse("cap_data/block_location.kml")
coord <- xpathApply(doc,"/kml:kml//kml:coordinates",xmlValue)
names <- xpathApply(doc,"/kml:kml//kml:name",xmlValue)
names <- names[c(6:195)]
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
#creating a datafram from the parsed block locations
count = 1
for (x in names){
name     <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block    <- name[2]
block    <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long         <- as.numeric(coordlist[1])
lat          <- as.numeric(coordlist[2])
row          <- data.frame(district=district, block=block, long = long, lat = lat)
data         <- rbind(data,row)
count        <- count + 1
}
#summing at the block level from the asset data and the combining with a coordinates for a final complete
assetTable                 <- data.table(joinTable)
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member),
sum(as.numeric(education_skills.literate))/sum(household.household_member)
),
by = list(district,collector.block_number)])
colnames(blockSumTable)[2] <- "block"
colnames(blockSumTable)[3] <- "total_educated"
colnames(blockSumTable)[4] <- "total_residents"
colnames(blockSumTable)[5] <- "literacy"
mergeTable                 <- merge(x=blockSumTable, y = data, keyby=list("district","block"), all = TRUE)
cleanFinal                 <- mergeTable[!is.na(mergeTable['V1']),]
saveRDS(cleanFinal,"cap_data/block_summary.rds")
cleanFinal                 <- mergeTable[!is.na(mergeTable['total_residents']),]
saveRDS(cleanFinal,"cap_data/block_summary.rds")
runApp()
colorBin("Spectra",block$literacy, 7 , pretty = TRUE)
colorBin("Spectral",block$literacy, 7 , pretty = TRUE)
colorBin("Spectral",block$literacy, 3 , pretty = TRUE)
block$literacy
colorQuantile("Spectral",block$literacy, 3 , pretty = TRUE)
colorQuantile("Spectral",block$literacy, 3)
colorQuantile("Spectral",block$literacy, 7)
colorQuantile("Spectral",block$total_educated, 7)
colorBin("Spectral",block$literacy, 3 , pretty = TRUE)
colorNumeric("Spectral", colorData)
colorNumeric("Spectral", block$literacy)
colorQuantile("Spectral",block$literacy, 7)
colorNumeric("Spectral", block$literacy)
colorBin("Spectral",block$literacy, 3 , pretty = TRUE)
colorBin("Spectral",block$literacy, 3 , pretty = TRUE, domain(0,1))
colorBin("Spectral",block$literacy, 3 , pretty = TRUE, domain= c(0,1))
colorBin("Spectral",block$literacy, bins = 3 , pretty = TRUE, domain= c(0,1))
colorBin("Spectral",block$literacy, bins = 3 , pretty = TRUE, domain= c(0:1))
colorBin("Spectral",block$literacy, bins = 3 , pretty = TRUE, domain= 0:1)
colorBin("Spectral",block$literacy, bins = 3 , pretty = TRUE, domain= 0.0:1.0)
colorQuantile("Spectral",block$literacy)
colorQuantile("Spectral",block$total_educated)
runApp()
library(gtools)
library(data.table)
library(XML)
#read in asset csv files, assign district column based on relevant district
#join the tables together
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "2"
d8$district <- "8"
d9$district <- "9"
joinTable   <- smartbind(d2,d8)
joinTable   <- smartbind(joinTable,d9)
#reading and parsing the block locations from the kml files
doc   <- xmlInternalTreeParse("cap_data/block_location.kml")
coord <- xpathApply(doc,"/kml:kml//kml:coordinates",xmlValue)
names <- xpathApply(doc,"/kml:kml//kml:name",xmlValue)
names <- names[c(6:195)]
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
#creating a datafram from the parsed block locations
count = 1
for (x in names){
name     <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block    <- name[2]
block    <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long         <- as.numeric(coordlist[1])
lat          <- as.numeric(coordlist[2])
row          <- data.frame(district=district, block=block, long = long, lat = lat)
data         <- rbind(data,row)
count        <- count + 1
}
#summing at the block level from the asset data and the combining with a coordinates for a final complete
assetTable                 <- data.table(joinTable)
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member),
(sum(as.numeric(education_skills.literate))/sum(household.household_member))*100,
),
by = list(district,collector.block_number)])
colnames(blockSumTable)[2] <- "block"
colnames(blockSumTable)[3] <- "total_educated"
colnames(blockSumTable)[4] <- "total_residents"
colnames(blockSumTable)[5] <- "literacy"
mergeTable                 <- merge(x=blockSumTable, y = data, keyby=list("district","block"), all = TRUE)
cleanFinal                 <- mergeTable[!is.na(mergeTable['total_residents']),]
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member),
sum(as.numeric(education_skills.literate))/sum(household.household_member)*100
),
by = list(district,collector.block_number)])
colorQuantile("Spectral",block$total_educated)
blockSumTable
colnames(blockSumTable)[2] <- "block"
colnames(blockSumTable)[3] <- "total_educated"
colnames(blockSumTable)[4] <- "total_residents"
colnames(blockSumTable)[5] <- "literacy"
mergeTable                 <- merge(x=blockSumTable, y = data, keyby=list("district","block"), all = TRUE)
cleanFinal                 <- mergeTable[!is.na(mergeTable['total_residents']),]
saveRDS(cleanFinal,"cap_data/block_summary.rds")
runApp()
library(gtools)
library(data.table)
library(XML)
#read in asset csv files, assign district column based on relevant district
#join the tables together
d2          <- read.csv("cap_data/d2.csv")
d8          <- read.csv("cap_data/d8.csv")
d9          <- read.csv("cap_data/d9.csv")
d2$district <- "2"
d8$district <- "8"
d9$district <- "9"
joinTable   <- smartbind(d2,d8)
joinTable   <- smartbind(joinTable,d9)
#reading and parsing the block locations from the kml files
doc   <- xmlInternalTreeParse("cap_data/block_location.kml")
coord <- xpathApply(doc,"/kml:kml//kml:coordinates",xmlValue)
names <- xpathApply(doc,"/kml:kml//kml:name",xmlValue)
names <- names[c(6:195)]
data <- data.frame(
district=character(),
block=character(),
long=numeric(),
lat = numeric()
)
#creating a datafram from the parsed block locations
count = 1
for (x in names){
name     <- unlist(strsplit(x," - "))
district <- name[1]
district <- substr(district,2,nchar(district))
block    <- name[2]
block    <- substr(block,2,nchar(block))
currentcoord <- coord[count]
coordlist    <- unlist(strsplit(currentcoord[[1]],","))
long         <- as.numeric(coordlist[1])
lat          <- as.numeric(coordlist[2])
row          <- data.frame(district=district, block=block, long = long, lat = lat)
data         <- rbind(data,row)
count        <- count + 1
}
#summing at the block level from the asset data and the combining with a coordinates for a final complete
assetTable                 <- data.table(joinTable)
blockSumTable              <- data.frame(assetTable[, list(sum(as.numeric(education_skills.literate)),
sum(household.household_member),
sum(as.numeric(education_skills.literate))/sum(household.household_member)*100
),
by = list(district,collector.block_number)])
colnames(blockSumTable)[2] <- "block"
colnames(blockSumTable)[3] <- "total_educated"
colnames(blockSumTable)[4] <- "total_residents"
colnames(blockSumTable)[5] <- "literacy"
mergeTable                 <- merge(x=blockSumTable, y = data, keyby=list("district","block"), all = TRUE)
cleanFinal                 <- mergeTable[!is.na(mergeTable['total_residents']),]
saveRDS(cleanFinal,"cap_data/block_summary.rds")
runApp()
runApp()
4==1
"4==1"
expression("4==1")
4==1
library(Lahman)
install.packages("Lahman")
library(Lahman)
library(dplyr)
library(tidyr)
pitchers <- Pitching %>%
group_by(playerID) %>%
summarize(gamesPitched = sum(G)) %>%
filter(gamesPitched > 3)
pitchers
career <- Batting %>%
filter(AB > 0) %>%
anti_join(pitchers, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB))
career
install.packages("ebbr")
library(ebbr)
library(ebbr)
career
career <- Batting %>%
filter(AB > 0) %>%
anti_join(Pitching, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB)) %>%
mutate(average = H / AB)
# use names along with the player IDs
career <- Master %>%
tbl_df() %>%
select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID") %>%
select(-playerID)
career
career_filtered <- career %>%
filter(AB >= 500)
career_filtered
m <- MASS::fitdistr(career_filtered$average, dbeta,
start = list(shape1 = 1, shape2 = 10))
m
alpha0 <- m$estimate[1]
beta0 <- m$estimate[2]
alpha0
beta0
career_eb <- career %>%
mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0))
career_eb
career_eb.sort
career_eb
career_filtered
typeof(career_filtered)
career_eb[order(career_eb$eb_estimate),]
career_eb[order(-career_eb$eb_estimate),]
career_eb <- career_eb %>%
mutate(alpha1 = H + alpha0,
beta1 = AB - H + beta0)
yankee_1998 <- c("brosisc01", "jeterde01", "knoblch01", "martiti02", "posadjo01", "strawda01", "willibe02")
yankee_1998_career <- career_eb %>%
filter(playerID %in% yankee_1998)
attach(career_eb)
yankee_1998 <- c("brosisc01", "jeterde01", "knoblch01", "martiti02", "posadjo01", "strawda01", "willibe02")
yankee_1998_career <- career_eb %>%
filter(playerID %in% yankee_1998)
career_eb
career <- Batting %>%
filter(AB > 0) %>%
anti_join(Pitching, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB)) %>%
mutate(average = H / AB)
career <- Master %>%
tbl_df() %>%
select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID")
career_filtered <- career %>% filter(AB >= 500)
m <- MASS::fitdistr(career_filtered$average, dbeta,
start = list(shape1 = 1, shape2 = 10))
alpha0 <- m$estimate[1]
beta0 <- m$estimate[2]
career_eb <- career %>%
mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0))
career_eb <- career_eb %>%
mutate(alpha1 = H + alpha0,
beta1 = AB - H + beta0)
yankee_1998 <- c("brosisc01", "jeterde01", "knoblch01", "martiti02", "posadjo01", "strawda01", "willibe02")
yankee_1998_career <- career_eb %>%
filter(playerID %in% yankee_1998)
library(broom)
library(ggplot2)
install.packages("broom")
library(broom)
library(ggplot2)
yankee_beta <- yankee_1998_career %>%
inflate(x = seq(.18, .33, .0002)) %>%
ungroup() %>%
mutate(density = dbeta(x, alpha1, beta1))
ggplot(yankee_beta, aes(x, density, color = name)) +
geom_line() +
stat_function(fun = function(x) dbeta(x, alpha0, beta0),
lty = 2, color = "black")
yankee_1998_career <- yankee_1998_career %>%
mutate(low  = qbeta(.025, alpha1, beta1),
high = qbeta(.975, alpha1, beta1))
yankee_1998_career %>%
select(-alpha1, -beta1, -eb_estimate) %>%
knitr::kable()
library(dplyr)
library(tidyr)
library(Lahman)
career <- Batting %>%
filter(AB > 0) %>%
anti_join(Pitching, by = "playerID") %>%
group_by(playerID) %>%
summarize(H = sum(H), AB = sum(AB)) %>%
mutate(average = H / AB)
career <- Master %>%
tbl_df() %>%
select(playerID, nameFirst, nameLast) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(career, by = "playerID")
career_filtered <- career %>% filter(AB >= 500)
m <- MASS::fitdistr(career_filtered$average, dbeta,
start = list(shape1 = 1, shape2 = 10))
alpha0 <- m$estimate[1]
beta0 <- m$estimate[2]
career_eb <- career %>%
mutate(eb_estimate = (H + alpha0) / (AB + alpha0 + beta0)) %>%
mutate(alpha1 = H + alpha0,
beta1 = AB - H + beta0)
